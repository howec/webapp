{"ast":null,"code":"var _jsxFileName = \"/Users/howe/Desktop/webapp/client/src/index.js\";\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\nimport App from './App';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), document.getElementById('root')); // ReactDOM.render(<App />, document.querySelector('#root'));\n\nconst responseGoogle = response => {\n  console.log(response);\n};\n\nReactDOM.render(React.createElement(GoogleLogin, {\n  clientId: \"273539098251-5nhctai82l0ram9s38gkp7s22ahc4lui.apps.googleusercontent.com\",\n  buttonText: \"Login\",\n  onSuccess: responseGoogle,\n  onFailure: responseGoogle,\n  cookiePolicy: 'single_host_origin',\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}), document.getElementById('googleButton')); // onSuccess={(response) => { this.setState({ userLoggedIn: true, }, () => { localStorage.setItem('userLoggedIn', true); });\n//implement way to prevent ddos attacks later.... max amount of workspaces per user\n//test whether I can create \"account\"\n\nvar test = document.getElementById(\"test\");\ntest.addEventListener(\"click\", function () {\n  this.socket.emit(\"createWorkspace\", \"NAME\", \"URL\");\n  console.log(\"ENTERED\");\n});\nconsole.log('before the emission');\nthis.socket.emit('test', {\n  testing: \"0000\"\n});\nthis.socket.on(\"sendingattempt\", function (data) {\n  console.log(data.attempt);\n});","map":{"version":3,"sources":["/Users/howe/Desktop/webapp/client/src/index.js"],"names":["React","ReactDOM","GoogleLogin","App","render","document","getElementById","responseGoogle","response","console","log","test","addEventListener","socket","emit","testing","on","data","attempt"],"mappings":";AAAA,OAAO,aAAP;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAKA,OAAOC,GAAP,MAAgB,OAAhB;AAIAF,QAAQ,CAACG,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CACA;;AAMA,MAAMC,cAAc,GAAIC,QAAD,IAAc;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,CAFD;;AAIAP,QAAQ,CAACG,MAAT,CACE,oBAAC,WAAD;AACE,EAAA,QAAQ,EAAC,0EADX;AAEE,EAAA,UAAU,EAAC,OAFb;AAGE,EAAA,SAAS,EAAEG,cAHb;AAIE,EAAA,SAAS,EAAEA,cAJb;AAKE,EAAA,YAAY,EAAE,oBALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAQEF,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CARF,E,CAYA;AAIA;AAEA;;AACA,IAAIK,IAAI,GAAGN,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAX;AACAK,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+B,YAAU;AACvC,OAAKC,MAAL,CAAYC,IAAZ,CAAiB,iBAAjB,EAAoC,MAApC,EAA4C,KAA5C;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,CAHD;AAKAD,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,KAAKG,MAAL,CAAYC,IAAZ,CAAiB,MAAjB,EAAyB;AAACC,EAAAA,OAAO,EAAE;AAAV,CAAzB;AAEA,KAAKF,MAAL,CAAYG,EAAZ,CAAe,gBAAf,EAAiC,UAASC,IAAT,EAAc;AAC7CR,EAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAACC,OAAjB;AACD,CAFD","sourcesContent":["import './index.css'\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n\n\n\n\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<App />, document.querySelector('#root'));\n\n\n\n\n \nconst responseGoogle = (response) => {\n  console.log(response);\n}\n \nReactDOM.render(\n  <GoogleLogin\n    clientId=\"273539098251-5nhctai82l0ram9s38gkp7s22ahc4lui.apps.googleusercontent.com\"\n    buttonText=\"Login\"\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n    cookiePolicy={'single_host_origin'}\n  />,\n  document.getElementById('googleButton')\n);\n\n\n// onSuccess={(response) => { this.setState({ userLoggedIn: true, }, () => { localStorage.setItem('userLoggedIn', true); });\n\n\n\n//implement way to prevent ddos attacks later.... max amount of workspaces per user\n\n//test whether I can create \"account\"\nvar test = document.getElementById(\"test\");\ntest.addEventListener(\"click\", function(){\n  this.socket.emit(\"createWorkspace\", \"NAME\", \"URL\");\n  console.log(\"ENTERED\");\n});\n\nconsole.log('before the emission');\nthis.socket.emit('test', {testing: \"0000\"});\n\nthis.socket.on(\"sendingattempt\", function(data){\n  console.log(data.attempt);\n});\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}